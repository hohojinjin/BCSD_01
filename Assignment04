using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BCSD_01 : MonoBehaviour
{
    void Awake() //게임 오브젝트 생성할 때, 최초 실행, 초기화 영역
    {
        Debug.Log("플레이어 데이터가 준비되었습니다.");
    }

    void OnEnable() //게임 오브젝트가 활성화 되었을 때, 최초 1회실행이 아닌 키고 끌때마다 활성화, 활성화 영역
    {
        Debug.Log("플레이어가 로그인했습니다.");
    }

    void Start() //업데이트 시작 직전, 최초 실행, 물리 영역
    {
        Debug.Log("사냥 장비를 챙겼습니다.");
    }

    void FixedUpdate() //물리 연산 업데이트, 1초에 여러번(약 50번) 작동, 고정된 실행 주기로 CPU를 많이 사용
    {
        Debug.Log("이동~");
    }

    void Update() //게임 로직 업데이트, 주기적으로 변하는 로직을 넣을 때 사용, 환경에 따라 실행 주기가 떨어질 수 있음
    {
        Debug.Log("몬스터 사냥!!");
    }

    void LateUpdate() // 모든 업데이트 끝난 후, 캐릭터를 따라가는 카메라 또는 로직의 후처리를 담는 곳
    {
        Debug.Log("경험치 획득.");
    }

    void OnDisable() // 게임 오브젝트가 비활성화 되었을 때, 비활성화 영역
    {
        Debug.Log("플레이어가 로그아웃했습니다.");
    }

    void OnDestroy() // 게임 오브젝트가 삭제될 때, 무언가 남기고 삭제된다는 느낌, Awake랑 반대 느낌
    {
        Debug.Log("플레이어 데이터를 해제하였습니다.");
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BCSD_01 : MonoBehaviour
{
    void Update()
    {
        //게임 내 입력을 관리하는 클래스(마우스, 키보드 등)
        if (Input.anyKeyDown) //아무 입력을 최초로 받을 때 true, bool값을 받음
            Debug.Log("플레이어가 아무 키를 눌렀습니다.");

        if (Input.anyKey) //아무 입력을 받으면 True
            Debug.Log("플레이어가 아무 키를 누르고 있습니다.");
        //각 입력함수는 3가지 행동으로 구분(눌렀을 때, 누르고 있을 때, 뗏을때)

        if (Input.GetKeyDown(KeyCode.Return)) // 키보드 버튼 입력을 받으면 True, Return이 Enter임, KeyPadEnter
            Debug.Log("아이템을 구입하였습니다."); //w하려면 KeyCode.w , esc면 KeyCode.Escape

        if (Input.GetKey(KeyCode.LeftArrow)) // GetKey : 꾹 누르고 있을 때 호출되는 함수
            Debug.Log("왼쪽으로 이동 중");

        if (Input.GetKeyUp(KeyCode.RightArrow)) //키보드 버튼을 똇을 때
            Debug.Log("오른쪽 이동을 멈추었습니다.");
        
        //마우스 버튼 입력을 받으면 true
        if (Input.GetMouseButtonDown(0)) //매개변수는 숫자로 받음, 0:마우스 인쪽버튼, 1:마우스 오른쪽 버튼
            Debug.Log("미사일 발사!");

        if (Input.GetMouseButton(0))
            Debug.Log("미사일 모으는 중...");

        if (Input.GetMouseButtonUp(0))
            Debug.Log("슈퍼 미사일 발사!!");
        
        //input manager에서 button 설정 가능
        //Edit->Project Settings -> Input Manager
        if (Input.GetButtonDown("Jump")) //Input 버튼 입력을 받으면 True, 대소문자 구분 해야함
            Debug.Log("점프!");

        if (Input.GetButton("Jump"))
            Debug.Log("점프 모으는 중...");

        if (Input.GetButtonUp("Jump"))
            Debug.Log("슈퍼 점프!!!");
        //size변경하면 Button 새로 추가, 기존 변경 가능

        if (Input.GetButton("Horizontal"))
        {
            Debug.Log("횡 이동 중..."+ Input.GetAxis("Horizontal")); //GetAxis: 수평, 수직 버튼 입력을 받으면 float, 중간값도 표현됨
            //살짝 누르면 살짝 움직이고 꾹 누르면 -1로 수렴함
        }
        if (Input.GetButton("Horizontal"))
        {
            Debug.Log("횡 이동 중..." + Input.GetAxisRaw("Horizontal")); //오브젝트는 변수 transform을 항상 가지고 있음
            //GetAxisRaw: 가중치가 없이 왼쪽 오른쪽으로 이동할 수 있는 -1 / 1로만 표현됨
        }
        if (Input.GetButton("Vertical"))
        {
            Debug.Log("종 이동 중..." + Input.GetAxisRaw("Vertical"));
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BCSD_01 : MonoBehaviour
{
    void Start() //입력값을 받은거를 토대로 오브젝트 이동
    //Transform : 오브젝트 형태에 대한 기본 컴포넌트, 게임 오브젝트랑 일대일 관계, 위치, 회전, 크기
    //선언해서 초기화 할 필요 없음
    //오브젝트는 변수 transform을 항상 가지고 있음
    {
        Vector3 vec = new Vector3(5, 0, 0); //x에 5값을 더해줌
        transform.Translate(vec);//벡터 값을 현재 위치에 더하는 함수(Vector3이면 3차원, Vector2면 2차원)
        // 스칼라 : 순수한 값 , 방향까지 주어지면 벡터 값
    }

    void Update() // 1초에 대략 60번씩 계속 동장
    {
        Vector3 vec = new Vector3(0, 0.1f, 0); // y축 방향으로 0.1씩 계속 움직임
        transform.Translate(vec);

        Vector3 vec1 = new Vector3(Input.GetAxis("Horizontal"), Input.GetAxis("Vertical"), 0);
        transform.Translate(vec1);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BCSD_01 : MonoBehaviour
{
    Vector3 target = new Vector3(8, 1.5f, 0);
    void Update() // 1초에 대략 60번씩 계속 동작
    {
        transform.position =
            Vector3.MoveTowards(transform.position, target, 1f); //MoveTowards : 등속 이동, 매개변수는 (현재위치,목표위치,속도)로 구성
        //마지막 매개변수에 비례하여 속도 증가

        Vector3 velo = Vector3.zero;
        transform.position =
            Vector3.SmoothDamp(transform.position, target, ref velo,1f);//smoothdamp: 부드러운 감속 이동
        //매개변수는 (현재위치, 목표위치, 참조 속도,속도)
        //마지막 매개변수에 반비례하여 속도 증가
        //ref : 참조 접근 -> 실시간으로 바뀌는 값 적용 가능

        transform.position =
            Vector3.Lerp(transform.position, target, 1f);//Lerp: 선형 보간, SmoothDamp보다 감속시간이 김
        //마지막 매개변수에 비례하여 속도 증가(최대값 1)

        transform.position =
            Vector3.Slerp(transform.position, target, 0.05f); //Slerp: 구면 선형 보간, 호를 그리며 이동(포물선처럼 이동)
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BCSD_01 : MonoBehaviour
{
    void Start()
    {

    }
    void Update()
    {
        Vector3 vec = new Vector3(
            Input.GetAxisRaw("Horizontal") * Time.deltaTime, Input.GetAxisRaw("Vertical") * Time.deltaTime));
            transform.Translate(vec);
        //Translate : 벡터에 곱하기 transform.Translate(Vec*Time.deltaTime);
        //Vector 함수 : 시간 매개변수에 곱하기, Vector3.Lerp(Vec1,Vec2,T*Time.deltaTime);
        //deltaTime값은 프레임이 적으면 크고, 프레임이 많으면 작음
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MyBall : MonoBehaviour
{
    Rigidbody rigid;
    void Start()
    {
        rigid = GetComponent<Rigidbody>(); //자신의 T타입 컴퓨넌트를 가져옴.
        rigid.velocity = Vector3.right; //velocity : 현재 이동 속도
        rigid.velocity = new Vector3(2, 4, -1);
        rigid.AddForce(Vector3.up * 5, ForceMode.Impulse); //vec의 방향과 크기로 힘을 줌, Forcemode : 힘을 주는 방식(가속, 무게 반영)
    }

    // RigidBody 관련 코드는 FixedUpdate에 작성
    void FixedUpdate()
    {
        if (Input.GetButtonDown("Jump"))
        {
            rigid.AddForce(Vector3.up * 50, ForceMode.Impulse); //AddForce의 힘 방향으로 계속 속도 velocity가 증가
        }
        Vector3 vec = new Vector3(Input.GetAxisRaw("Horizontal"), 0, Input.GetAxisRaw("Vertical"));
        rigid.AddForce(vec, ForceMode.Impulse);

        //회전력
        rigid.AddTorque(Vector3.back); //Vec 방향을 축으로 회전력이 생김 ,축 기준으롣 돔
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MyBall : MonoBehaviour
{
    Rigidbody rigid;
    void Start()
    {
        rigid = GetComponent<Rigidbody>(); //자신의 T타입 컴퓨넌트를 가져옴.        
    }

    // RigidBody 관련 코드는 FixedUpdate에 작성
    void FixedUpdate()
    {
        float h = Input.GetAxisRaw("Horizontal");
        float v = Input.GetAxisRaw("Vertical");
        Vector3 vec = new Vector3(h, 0, v);

        rigid.AddForce(vec, ForceMode.Impulse);
    }

    private void OnTriggerStay(Collider other)
    {
        if(other.name=="Cube")
            rigid.AddForce(Vector3.up*2, ForceMode.Impulse);
    }
    //실제 물리적인 충돌로 발생하는 이벤트 -> Collision
    void OnCollisionEnter(Collision collision) { }
    void OnCollisionStay(Collision collision) { }
    void OnCollisionExit(Collision collision) { }
    //콜라이더 충돌로 발생하는 이벤트 -> Collider
    void OnTriggerEnter(Collider other) { }
    void OnTriggerStay(Collider other) { }
    void OnTriggerExit(Collider other) { }
}
------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class OtherBall : MonoBehaviour
{
    MeshRenderer mesh; //오브젝트의 재질 접근은 MeshRenderer을 통해서
    Material mat;
    void Start()
    {
        mesh = GetComponent<MeshRenderer>();
        mat = mesh.material;
    }
    //CollisionEnter : 물리적 충돌이 시작할 때 호출되는 함수
    private void OnCollisionEnter (Collision collision) //Collision : 충돌 정보 클래스
    {
        if(collision.gameObject.name == "My Ball")
            mat.color = new Color(0, 0, 0);
    }
    private void OnCollisionStay(Collision collision)
    {

    }
    private void OnCollisionExit(Collision collision) //충돌이 끝났을 때
    {
        if (collision.gameObject.name == "My Ball")
            mat.color = new Color(1, 1, 1);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MyBall : MonoBehaviour
{
    Rigidbody rigid;
    void Start()
    {
        rigid = GetComponent<Rigidbody>(); //자신의 T타입 컴퓨넌트를 가져옴.        
    }

    // RigidBody 관련 코드는 FixedUpdate에 작성
    void FixedUpdate()
    {
        float h = Input.GetAxisRaw("Horizontal");
        float v = Input.GetAxisRaw("Vertical");
        Vector3 vec = new Vector3(h, 0, v);

        rigid.AddForce(vec, ForceMode.Impulse);
    }

    private void OnTriggerStay(Collider other)
    {
        if(other.name=="Cube")
            rigid.AddForce(Vector3.up*2, ForceMode.Impulse);
    }
    
    public void Jump()
    {
        rigid.AddForce(Vector3.up * 20, ForceMode.Impulse);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class QuestData
{
    public string questName;
    public int[] npcId;

    public QuestData(string name,int[]npc)//구조체 생성을 위해 매개변수 생성자를 작성
    {
        questName = name; 
        npcId = npc;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class QuestManager : MonoBehaviour
{
    public int questId; // 지금 진행중인 퀘스트 Id
    public int questActionIndex; // 퀴스트 대화순서 변수 생성
    public GameObject[] questObject;

    Dictionary<int, QuestData> questList;
    void Awake()
    {
        questList = new Dictionary<int, QuestData>();
        GenerateData();
    }

    // Update is called once per frame
    void GenerateData()
    {
        questList.Add(10, new QuestData("마을 사람들과 대화하기.", new int[] { 1000, 2000 }));//int[]에는 해당 퀘스트에 연관된 NPC Id를 입력
        questList.Add(20, new QuestData("호진이의 동전 찾아주기.", new int[] { 5000, 2000 }));
        questList.Add(20, new QuestData("퀘스트 클리어 !", new int[] {0}));

    }

    public int GetQuestTalkIndex(int id)//Npc Id를 받고 퀘스트번호를 반환하는 함수 생성
    {
        return questId + questActionIndex;
    }
    //대화 진행을 위해 퀘스트 대화순서를 올리는 함수 생성
    public string CheckQuest(int id) // 대화가 끝나면 증가
    {
        ControlObject();

        if(id==questList[questId].npcId[questActionIndex])//순서에 맞게 대화 했을 때만 퀘스트 대화순서를 올리도록 작성
        questActionIndex++;

        if (questActionIndex == questList[questId].npcId.Length)//퀘스트 대화순서가 끝에 도달했을 때 퀘스트번호 증가
            NextQuest();

        return questList[questId].questName;
    }
    public string CheckQuest()// 오버로딩 : 매개변수에 따라 함수 호출
    {
        return questList[questId].questName;
    }

    void NextQuest()//다음 퀘스트를 위한 함수 생성
    {
        questId += 10;
        questActionIndex = 0;
    }
    void ControlObject() //퀘스트 오브젝트를 관리할 함수 생성
    {
        switch (questId)
        {
            case 10: //퀘스트번호, 퀘스트 대화 순서에 따라 오브젝트를 조절
                if (questActionIndex == 2)
                    questObject[0].SetActive(true);
                break;
            case 20:// 동전을 먹었을 때
                if (questActionIndex == 1)
                    questObject[0].SetActive(false); // 비활성화
                break;
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    public TalkManager talkManager;
    public QuestManager questManager;
    public GameObject talkPanel;
    public Image portraitImg;
    public Text talkText;
    public int talkIndex;
    public GameObject scanObject;
    public bool isAction;

    void Start()
    {
        Debug.Log(questManager.CheckQuest()); 
    }
    public void Action(GameObject scanObj)
    {
            scanObject = scanObj;
            ObjData objData = scanObject.GetComponent<ObjData>();
            Talk(objData.id, objData.isNpc);
            
            talkPanel.SetActive(isAction);
    }
    void Talk(int id, bool isNpc)
    {
        int questTalkIndex = questManager.GetQuestTalkIndex(id);
        string talkData = talkManager.GetTalk(id+questTalkIndex, talkIndex); //퀘스트번호 + NPC ID = 퀘스트 대화 데이터 Id

        if(talkData == null)
        {
            isAction = false;
            talkIndex = 0; // talkIndex는 대화가 끝날 때 0으로 초기화
            Debug.Log(questManager.CheckQuest(id));
            return;
        }
        if (isNpc)
        {
            talkText.text = talkData.Split(':')[0];//구분하게 되면 문자열이 아닌 배열이 됨

            portraitImg.sprite = talkManager.GetPortrait(id,int.Parse(talkData.Split(':')[1]));//Parse(): 문자열을 해당 타입으로 변환하는 함수
            portraitImg.color = new Color(1, 1, 1, 1);
        }
        else
        {
            talkText.text = talkData;
            portraitImg.color = new Color(1, 1, 1, 0);
        }
        isAction = true;
        talkIndex++;
    }

}
----------------------------------------------------------------------------------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TalkManager : MonoBehaviour
{
    Dictionary<int, string[]> talkData;//대화 데이터를 저장한 딕셔너리 변수 생성
    Dictionary<int, Sprite> portraitData;

    public Sprite[] portraitArr; // 초상화 스프라이트를 저장할 배열 생성

    void Awake()
    {
        talkData = new Dictionary<int, string[]>();// 초기화
        portraitData = new Dictionary<int, Sprite>(); // 초기화
        GenerateData();
    }
    void GenerateData()
    {//Add함수를 사용하여 대화 데이터 입력 추가
        talkData.Add(1000, new string[]{ "안녕?:0", "이 곳에 처음 왔구나?"});//구분자와 함께 초상화 Index를 문장 뒤에 추가
        talkData.Add(2000, new string[] { "여어.:1","이 호수는 처음이지?" });
        talkData.Add(3000, new string[] { "평범한 나무상자다." });
        talkData.Add(4000, new string[] { "누군가 사용했던 흔적이 있는 책상이다." });

        talkData.Add(10 + 1000, new string[] { "어서와.:0", "이 마을에 전설이 있어:1", "오른쪽 호수 쪽에 호진이가 알려줄거야.:0" });
        talkData.Add(11 + 2000, new string[] { "여어.:1", "호수의 전설을 들으러 온거야?:0","일 좀 해봐!:1","동전 주워주면 돼" });

        talkData.Add(20 + 1000, new string[] { "호진이의 동전?:1", "돈 흘리면 안돼!:3","나중에 한마디 해야겠어.:3" });
        talkData.Add(20 + 2000, new string[] { "찾으면 꼭 좀 다져다 줘.:1"});
        talkData.Add(20 + 5000, new string[] { "근처에서 돈을 찾았다." });
        talkData.Add(21 + 2000, new string[] { "찾아줘서 고마워.:2" });

        portraitData.Add(1000+0, portraitArr[0]); //표정이 4개임
        portraitData.Add(1000 + 1, portraitArr[1]);
        portraitData.Add(1000 + 2, portraitArr[2]);
        portraitData.Add(1000 + 3, portraitArr[3]);
        portraitData.Add(2000 + 0, portraitArr[4]);
        portraitData.Add(2000 + 1, portraitArr[5]);
        portraitData.Add(2000 + 2, portraitArr[6]);
        portraitData.Add(2000 + 3, portraitArr[7]);
    }
    public string GetTalk(int id, int talkIndex) //지정된 대화 문장을 반환하는 함수 하나 생성
    {
        if (!talkData.ContainsKey(id))//ContainsKey(): Dictionary에 Key가 존재하는지 검사
        {
            if (talkIndex == talkData[id - id & 10))
                return GetTalk(id - id % 100, talkIndex); //Get First Talk, 반한 값이 있는 재귀는 return 사용
            else
                return GetTalk(id - id % 10, talkIndex);//Get First Quest Talk
        }
        if (talkIndex == talkData[id - id & 10].Length)
            return null;
        else
            return talkData[id - id % 10][talkIndex];
    }
    public Sprite GetPortrait(int id,int portraitIndex)
    {
        return portraitData[id+portraitIndex];
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------
